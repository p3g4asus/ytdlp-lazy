diff --git a/yt-dlp/yt_dlp/postprocessor/ffmpeg.py b/yt-dlp/yt_dlp/postprocessor/ffmpeg.py
index 27d06cbde..c646320ea 100644
--- a/yt-dlp/yt_dlp/postprocessor/ffmpeg.py
+++ b/yt-dlp/yt_dlp/postprocessor/ffmpeg.py
@@ -91,7 +91,7 @@ def get_versions(downloader=None):
     _version_cache, _features_cache = {}, {}
 
     def _determine_executables(self):
-        programs = ['avprobe', 'avconv', 'ffmpeg', 'ffprobe']
+        programs = ['avprobe', 'avconv', 'ffmpeg', 'ffprobe', 'libffmpeg.bin.so', 'libffprobe.bin.so']
 
         def get_ffmpeg_version(path, prog):
             if path in self._version_cache:
@@ -144,7 +144,7 @@ def get_ffmpeg_version(path, prog):
                 basename = os.path.splitext(os.path.basename(location))[0]
                 basename = next((p for p in programs if basename.startswith(p)), 'ffmpeg')
                 dirname = os.path.dirname(os.path.abspath(location))
-                if basename in ('ffmpeg', 'ffprobe'):
+                if basename in ('ffmpeg', 'ffprobe', 'libffmpeg.bin.so', 'libffprobe.bin.so'):
                     prefer_ffmpeg = True
 
             self._paths = dict(
@@ -153,7 +153,7 @@ def get_ffmpeg_version(path, prog):
                 self._paths[basename] = location
 
         self._versions = {}
-        executables = {'basename': ('ffmpeg', 'avconv'), 'probe_basename': ('ffprobe', 'avprobe')}
+        executables = {'basename': ('ffmpeg', 'avconv', 'libffmpeg.bin.so'), 'probe_basename': ('ffprobe', 'avprobe', 'libffprobe.bin.so')}
         if prefer_ffmpeg is False:
             executables = {k: v[::-1] for k, v in executables.items()}
         for var, prefs in executables.items():
@@ -297,7 +297,7 @@ def real_run_ffmpeg(self, input_path_opts, output_path_opts, *, expected_retcode
 
         cmd = [encodeFilename(self.executable, True), encodeArgument('-y')]
         # avconv does not have repeat option
-        if self.basename == 'ffmpeg':
+        if self.basename == 'ffmpeg' or self.basename == 'libffmpeg.bin.so':
             cmd += [encodeArgument('-loglevel'), encodeArgument('repeat+info')]
 
         def make_args(file, args, name, number):
